AWSTemplateFormatVersion: '2010-09-09'
Description: >
  ECS-workers-app



Parameters:

  # EC2KeyPair:
  #   Type: String
  #   Default: code_server_dev

  # SecurityGroupIds:
  #   Type: CommaDelimitedList
  #   Default: 'sg-0c9a0ca7844d7b128,sg-00d8b4ca79ee1e42f,sg-007caf776eee9bd32,sg-04b9c865721337372,sg-0b411b5391db8d7a3'

  # SubnetIds:
  #   Type: CommaDelimitedList
  #   Default: 'subnet-019da2a6738756f88,subnet-0642064673fd68d2e'

  # VPCId:
  #   Type: String
  #   Default: vpc-057803c925fd8138a

    
  StagePara:
    Type: String
    Default: test
  # ApplicationPara:
  #   Type: String
  #   Default: ecstask

  # # EFSAccessPointRootPath:
  # #   Type: String
  # #   Default: /ai-prepocessing-app

  # EFSFileSystemId:
  #   Type:  String
  #   Default: fs-01115862a24b75423

  # # EFSAccessPoint:
  # #   Type: String

  # ### Amid config: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # AMIID:
  #   Type: String
  #   Default: ami-0693a7971cd761811
  # InstanceType:
  #   Type: String
  #   Default: t3a.small

  # AIWaitTaskImage:
  #   Type: String
  #   Default: 737589818430.dkr.ecr.us-east-2.amazonaws.com/ai-services-repo:test-dowload-lib
  
  # InternetGatewayID:
  #   Type: String
  #   Default: igw-05a5a3a33c9cfa1fc

Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are four subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  # 10.0.2.0 - 10.0.2.255
  # 10.0.3.0 - 10.0.3.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    # PrivateOne:
    #   CIDR: '172.31.48.0/20'
    # PrivateTwo:
    #   CIDR: '172.31.64.0/20'

Resources:
  InternetVpcLayer:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']      
  
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}   
      VpcId: !Ref InternetVpcLayer      
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}   
      VpcId: !Ref InternetVpcLayer      
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true      

  InternetGateway:
    Type: AWS::EC2::InternetGateway 
  
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment 
    Properties:
      VpcId: !Ref InternetVpcLayer
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InternetVpcLayer 
      
  PublicRoute:
    Type: AWS::EC2::Route 
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0' 
      GatewayId: !Ref InternetGateway  

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable    

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  ECSCluster:
    Type: AWS::ECS::Cluster
  
  ECSTaskExecuteionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownLoadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:*'
                Resource: '*'
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:

              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              -  'elasticloadbalancing:RegisterTargets'
            Resource: '*'
  # config sercurity group for load balancer
  PublicLoadBalancerSercurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public network from load balancer from entire internet group
      VpcId: !Ref InternetVpcLayer
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  
  ContainerSercurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access network for container by sercurity group
      VpcId: !Ref InternetVpcLayer
  
  EcsSercurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSercurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSercurityGroup
  
  EcsSercurityGroupIngressFromSelf:
    Type:  AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSercurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ContainerSercurityGroup
  #load balancer
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicLoadBalancerSercurityGroup']
  #Target Group
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2:TargetGroup
    Properties:
      HealthCheckIntervalSecond: 6
      HealthCheckPath: /
      HealthCheckProtocol: Http
      

    
# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   AITaskECSClusterArn:
#     Description: "ECS Cluster with EC2 provider"
#     Value: !GetAtt AITaskECSCluster.Arn

#   AITaskDefinitionArn:
#     Description: "Task definition"
#     Value: !Ref MyWaitTaskDefinition
  
#   LsPrivateSubnetIDs:
#     Value: !Join [ ",", [!Ref PrivateSubnetOne, !Ref PrivateSubnetTwo ] ]