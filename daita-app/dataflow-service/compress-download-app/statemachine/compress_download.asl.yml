StartAt: StartECSDecompressTask
# StartAt: DivideDecompressChunksFunction
States:
  StartECSCompressDownloadTask:
    Type: Task
    Resource: arn:aws:states:::ecs:runTask.sync
    Parameters:
      Cluster: ${CompressDownloadTaskCluster}
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # Needed when pulling public Docker image
          Subnets:
            - ${SubnetId}
      Overrides:
        ContainerOverrides:
          -
            Name: compress-download
            Environment:
              - Name: TASK_ID
                Value.$: $.task_id
              - Name: IDENTIRY_ID
                Value.$: $.identity_id
              - Name: DOWN_TYPE
                Value.$: $.down_type
              - Name: PROJECT_NAME
                Value.$: $.project_name
              - Name: PROJECT_ID
                Value.$: $.project_id
      TaskDefinition: ${CompressDownloadTask}
    ResultPath: null # Forward previous step input as this step output
    Next: SendMailFunction

  # DivideDecompressChunksFunction:
  #   Type: Task
  #   Resource: arn:aws:states:::lambda:invoke
  #   ResultSelector:
  #       identity_id.$: "$$.Execution.Input.identity_id"
  #       result.$: "$.Payload"
  #   Parameters:
  #     FunctionName: "${DivideDecompressChunksFunction}"
  #     Payload.$: $
  #   Next: UploadDecompressedMapping

  # UploadDecompressedMapping:
  #   Type: Map
  #   InputPath: $
  #   ItemsPath: $.result.file_chunks
  #   Parameters:
  #     file_chunk.$: $$.Map.Item.Value
  #     project_id.$: $.result.project_id
  #     id_token.$: $.result.id_token
  #     project_name.$: $.result.project_name
  #     type_method.$: $.result.type_method
  #     s3_prefix.$: $.result.s3_prefix
  #     identity_id.$: $.identity_id
  #   Iterator:
  #     StartAt: UploadDecompressedFunction
  #     States:
  #       UploadDecompressedFunction:
  #         Type: Task
  #         Resource: arn:aws:states:::lambda:invoke
  #         Parameters:
  #           FunctionName: "${UploadDecompressedFunction}"
  #           Payload.$: $
  #         Next: ProjectUploadUpdateFunction
  #       ProjectUploadUpdateFunction:
  #         Type: Task
  #         Resource: arn:aws:states:::lambda:invoke
  #         InputPath: $.Payload
  #         Parameters:
  #           FunctionName: "${ProjectUploadUpdateFunction}"
  #           Payload:
  #             body.$: $.body
  #         Next: PostUploadFunction
  #       PostUploadFunction:
  #         Type: Task
  #         Resource: arn:aws:states:::lambda:invoke
  #         InputPath: $.Payload
  #         Parameters:
  #           FunctionName: "${PostUploadFunction}"
  #           Payload.$: $
  #         End: True
  #   ResultPath: null
  #   Next: FinishDecompressTaskFunction

  SendMailFunction:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    InputPath: $
    Parameters:
      FunctionName: "${FinishDecompressTaskFunction}"
      Payload.$: $
    Next: Complete

  Complete:
    Type: Pass
    # Comment: Used for result aggregation
    End: true
TimeoutSeconds: 1800