# StartAt: StartECSCompressDownloadTask
StartAt: DivideDownloadKeysFunction
States:
  DivideDownloadKeysFunction:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    InputPath: $
    Parameters:
      FunctionName: "${DivideDownloadKeysFunction}"
      Payload.$: $
    Next: DownloadFilesMapping

  DownloadFilesMapping:
    Type: Map
    InputPath: $
    ItemsPath: $.Payload.file_chunks
    Parameters:
      file_chunk.$: $$.Map.Item.Value
      workdir.$: $.Payload.workdir
    Iterator:
      StartAt: DownloadFilesFunction
      States:
        DownloadFilesFunction:
          Type: Task
          Resource: arn:aws:states:::lambda:invoke
          Parameters:
            FunctionName: "${DownloadFilesFunction}"
            Payload.$: $
          End: True
    ResultPath: null
    Next: StartECSCompressDownloadTask

  StartECSCompressDownloadTask:
    Type: Task
    InputPath: $.Payload
    Resource: arn:aws:states:::ecs:runTask.sync
    Parameters:
      Cluster: ${CompressDownloadTaskCluster}
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED # Needed when pulling public Docker image
          Subnets:
            - ${SubnetId}
      Overrides:
        ContainerOverrides:
          -
            Name: compress-download
            Environment:
              - Name: TASK_ID
                Value.$: $.task_id
              - Name: IDENTITY_ID
                Value.$: $.identity_id
              - Name: DOWN_TYPE
                Value.$: $.down_type
              - Name: PROJECT_NAME
                Value.$: $.project_name
              - Name: PROJECT_ID
                Value.$: $.project_id
              - Name: WORKDIR
                Value.$: $.workdir
      TaskDefinition: ${CompressDownloadTask}
    ResultPath: null # Forward previous step input as this step output
    Next: Complete

  # SendCompletedMailFunction:
  #   Type: Task
  #   Resource: arn:aws:states:::lambda:invoke
  #   InputPath: $
  #   Parameters:
  #     FunctionName: "${SendCompletedMailFunction}"
  #     Payload.$: $
  #   Next: Complete

  Complete:
    Type: Pass
    # Comment: Used for result aggregation
    End: true
TimeoutSeconds: 1800