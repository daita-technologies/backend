AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  decompress-app

Parameters:
  StagePara:
    Type: String
  ApplicationPara:
    Type: String
  SecurityGroupIds:
    Type: String
    Default: 'sg-af50cbde'
  SubnetId:
    Type: String
    Default: subnet-31ff5b5a
  EFSFileSystemId:
    Type:  String
    Default: fs-0199771f2dfe97ace
  EFSMountPath:
    Type: String
    Default: /mnt/efs
  S3BucketName:
    Type: String
  TableDataFlowTaskName:
    Type: String
  TableMethodsName:
    Type: String
  TableDataOriginal:
    Type: String
    Default: data_original
  TableDataAugment:
    Type: String
    Default: data_augment
  TableDataPreprocess:
    Type: String
    Default: data_preprocess
  VPCEndpointForS3:
    Type: String
  VPCEndpointForDynamoDB:
    Type: String
  EFSAccessPointRootPath:
    Type: String
    Default: /compress-download-app
  CompressDownloadEcrRepositoryName:
    Type: String
  SESIdentityName:
    Type: String
    Default: 'noreply@daita.tech'
  CommonCodeLayerName:
    Type: String


Globals:
  Function:
    Timeout: 10
    Handler: app.lambda_handler
    Runtime: python3.8
    Architectures:
      - x86_64
    Layers:
      - !Ref CommonCodeLayerName


Resources:
  #================ ROLES =====================================================

  #======================= NETWORKING ==========================================

  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystemId
      PosixUser:
        Gid: "1000"
        Uid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "777"
        Path: !Ref EFSAccessPointRootPath

#================ LOGS FOR STEP FUNCTIONS ===================================

  CompressDownloadStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${StagePara}-CompressDownloadSMLogGroup-${AWS::StackName}"
      RetentionInDays: 7

  CompressDownloadECSTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${StagePara}-CompressDownloadECSTaskLogGroup-${AWS::StackName}"
      RetentionInDays: 7

  CompressDownloadStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${ApplicationPara}-CompressDownloadSM"
      DefinitionUri: statemachine/compress_download.asl.yml
      DefinitionSubstitutions:
        CompressDownloadTaskCluster: !GetAtt CompressDownloadTaskCluster.Arn
        CompressDownloadTask: !Ref CompressDownloadTask
        SubnetId: !Ref SubnetId
        SendCompletedMailFunction: !GetAtt SendCompletedMailFunction.Arn
        DivideDownloadKeysFunction: !GetAtt DivideDownloadKeysFunction.Arn
        DownloadFilesFunction: !GetAtt DownloadFilesFunction.Arn
        TableDataFlowTaskName: !Ref TableDataFlowTaskName
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CompressDownloadStateMachineLogGroup.Arn
      Tracing:
        Enabled: true
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref SendCompletedMailFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DivideDownloadKeysFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref DownloadFilesFunction
        - DynamoDBCrudPolicy:
            TableName: !Ref TableDataFlowTaskName
        - Statement:
          - # Allow step to start ecs task
            Effect: Allow
            Action:
              - ecs:RunTask
              - ecs:StopTask
              - ecs:DescribeTasks
            Resource:
              - "*"
          -
            Effect: Allow
            Action:
              - events:PutTargets
              - events:PutRule
              - events:DescribeRule
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule
          -
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - "*"
          - # Allow access log groups
            Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
              - "logs:CreateLogDelivery"
              - "logs:GetLogDelivery"
              - "logs:UpdateLogDelivery"
              - "logs:DeleteLogDelivery"
              - "logs:ListLogDeliveries"
              - "logs:PutResourcePolicy"
              - "logs:DescribeResourcePolicies"
              - "logs:DescribeLogGroup"
              - "logs:DescribeLogGroups"
            Resource: "*"

  # Lambda functions
  DivideDownloadKeysFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/divide_download_keys
      Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
          - Sid: ALLOWCRUDDynamoDB
            Effect: Allow
            Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            - "s3:*"
            Resource: "*"
      Environment:
        Variables:
          TableDataOriginal: !Ref TableDataOriginal
          TableDataAugment: !Ref TableDataAugment
          TableDataPreprocess: !Ref TableDataPreprocess
          CHUNK_SIZE: 8

  DownloadFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/download_files
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupIds
        SubnetIds:
          - !Ref SubnetId
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: !Ref EFSMountPath
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName
          EFSMountPath: !Ref EFSMountPath

  SendCompletedMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/send_completed_email
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref SESIdentityName


  # ECS resources
  CompressDownloadTaskCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE

  CompressDownloadTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: arn:aws:iam::366577564432:role/ecsTaskExecutionRole #TODO:create this in template
      TaskRoleArn: arn:aws:iam::366577564432:role/DecompressTaskRole #TODO:create this in template
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ContainerDefinitions:
        -
          Name: "compress-download"
          Image: !Sub "366577564432.dkr.ecr.${AWS::Region}.amazonaws.com/${CompressDownloadEcrRepositoryName}:latest"
          Cpu: 256
          Memory: 512
          Environment:
            - Name: TableDataFlowTaskName
              Value: !Ref TableDataFlowTaskName
            - Name: TableMethodsName
              Value: !Ref TableMethodsName
            - Name: S3BucketName
              Value: !Ref S3BucketName
            - Name: EFSMountPath
              Value: !Ref EFSMountPath
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-group: !Ref CompressDownloadECSTaskLogGroup
              awslogs-stream-prefix: compress-download
          MountPoints:
            -
              SourceVolume: "my-vol"
              ContainerPath: !Ref EFSMountPath
      Volumes:
        -
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint
            FilesystemId: !Ref EFSFileSystemId
            TransitEncryption: ENABLED # enable this so maybe we don't need to config a access point https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-authorizationconfig.html
          Name: "my-vol"

Outputs:
  CompressDownloadStateMachineArn:
    Description: "Arn of CompressDownloadStateMachineArn"
    Value: !GetAtt CompressDownloadStateMachine.Arn