StartAt: HealthCheckTask
States:
  HealthCheckTask:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    InputPath: $.detail
    ResultSelector:
      body.$: $.Payload.body.data
      detail.$: $$.Execution.Input.detail
    ResultPath: $
    OutputPath: $
    Parameters:
      FunctionName: "${GetDataFunction}"
      Payload:
        body.$: $
    Next: CalculateHealthCheckMap
    Comment: >-
      Check the level of parallelism, split requests into chunks and invoke
      lamndas
    Catch: 
      - ErrorEquals: 
        - States.ALL
        Next: CatchErrorTaskDynamoDB 
        ResultPath: null 
    Retry:
      - ErrorEquals:
          - RetriableCallerServiceError
        IntervalSeconds: 1
        MaxAttempts: 2
        BackoffRate: 1    

  CalculateHealthCheckMap:
    Type: Map
    InputPath: $
    ItemsPath: $.body.ls_file_s3
    ResultPath: null
    Parameters:
      file_s3.$: $$.Map.Item.Value
      project_id.$: $.detail.project_id
      data_table_name.$: $.body.data_table_name
      data_type.$: $.detail.data_type
    MaxConcurrency: 10
    Catch: 
      - ErrorEquals: 
        - States.ALL
        Next: CatchErrorTaskDynamoDB 
        ResultPath: null
    Iterator:
      StartAt: CalculateHCTask
      States:
        CalculateHCTask:
          Type: Task
          Resource: 'arn:aws:states:::lambda:invoke'
          ResultSelector:
            project_id.$: $.Payload.project_id
            data_table_name.$: $.Payload.data_table_name
            healthcheck.$: $.Payload.healthcheck
            data_type.$: $$.Execution.Input.detail.data_type
          ResultPath: $
          OutputPath: $
          Parameters:
            FunctionName: "${CalculateHealthCheckFunction}"
            Payload:
              body.$: $
          Next: UpdateDBTask
        UpdateDBTask:
          Type: Task
          Resource: 'arn:aws:states:::lambda:invoke'
          InputPath: $
          OutputPath: $.Payload.body
          Parameters:
            FunctionName: "${UpdateDBFunction}"
            Payload:
              body.$: $
          End: true
    Next: UpdateStatusTask

  UpdateStatusTask:
    Type: Task
    Resource: 'arn:aws:states:::dynamodb:updateItem'
    Parameters:
      TableName: "${TableHealthCheckTasksName}"
      Key:
        identity_id:
          S.$: $.detail.identity_id
        task_id:
          S.$: $.detail.task_id
      UpdateExpression: 'SET #st = :st'
      ExpressionAttributeNames:
        '#st': status
      ExpressionAttributeValues:
        ':st':
          S: FINISH
    ResultPath: $.DynamoDB
    End: true

  CatchErrorTaskDynamoDB:
    Type: Task
    Resource: 'arn:aws:states:::dynamodb:updateItem'
    InputPath: $.detail
    Parameters:
      TableName: "${TableHealthCheckTasksName}"
      Key:
        identity_id:
          S.$: $.identity_id
        task_id:
          S.$: $.task_id
      UpdateExpression: 'SET #st = :st'
      ExpressionAttributeNames:
        '#st': status
      ExpressionAttributeValues:
        ':st':
          S: ERROR
    ResultPath: $.DynamoDB
    End: true

TimeoutSeconds: 6000
