StartAt: DownloadTask
States:
  DownloadTask:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    InputPath: $
    OutputPath: $.Payload
    Parameters:
      FunctionName: '${HandleDownloadTask}'
      Payload:
        body.$: $.body
    Next: BranchesDownloadImage
    Comment: 'Check the level of parallelism, split requests into chunks and invoke'
    Retry:
      - ErrorEquals:
          - RetriableCallerServiceError
        IntervalSeconds: 1
        MaxAttempts: 2
        BackoffRate: 1
      - ErrorEquals:
          - Lambda.TooManyRequestsException
          - Lambda.ServiceException
        IntervalSeconds: 3
        MaxAttempts: 7
        BackoffRate: 2
  BranchesDownloadImage:
    Type: Parallel
    Retry:
      - ErrorEquals:
          - Lambda.TooManyRequestsException
          - Lambda.ServiceException
        IntervalSeconds: 3
        MaxAttempts: 7
        BackoffRate: 2
    Branches:
      - StartAt: DownloadImages
        States:
          DownloadImages:
            Type: Map
            MaxConcurrency: 15
            End: true
            InputPath: $
            ItemsPath: $.download_images
            Parameters:
              task.$: $$.Map.Item.Value
            Iterator:
              StartAt: DownloadImageFromEFS
              States:
                DownloadImageFromEFS:
                  Type: Task
                  Resource: 'arn:aws:states:::lambda:invoke'
                  OutputPath: $.Payload
                  Parameters:
                    FunctionName: '${HandleDownloadImages}'
                    Payload.$: $
                  Retry:
                    - ErrorEquals:
                        - Lambda.TooManyRequestsException
                        - Lambda.ServiceException
                      IntervalSeconds: 3
                      MaxAttempts: 7
                      BackoffRate: 2
                  End: true
      - StartAt: ReferenceImageCalculate
        States:
          ReferenceImageCalculate:
            Type: Task
            Resource: 'arn:aws:states:::lambda:invoke'
            InputPath: $
            OutputPath: $.Payload
            Parameters:
              FunctionName: '${ReferenceImageCalculateFunction}'
              Payload.$ : $
            Next: IsCheckRetry
            Retry:
              - ErrorEquals:
                  - Lambda.TooManyRequestsException
                  - Lambda.ServiceException
                IntervalSeconds: 3
                MaxAttempts: 7
                BackoffRate: 2
          IsCheckRetry:
            Type: Choice
            Choices:
            - Variable: $.is_retry
              BooleanEquals: true
              Next: ReferenceImageCalculate
            - Variable: $.is_retry
              BooleanEquals: false
              Next:  MergeDownloadImages
          MergeDownloadImages:
            Type: Task
            Resource: 'arn:aws:states:::lambda:invoke'
            End: true
            InputPath: $
            OutputPath: $.Payload
            Parameters:
              FunctionName: '${HandleMergeResultDownloadImages}'
              Payload.$: $
            Retry:
              - ErrorEquals:
                  - Lambda.TooManyRequestsException
                  - Lambda.ServiceException
                IntervalSeconds: 3
                MaxAttempts: 7
                BackoffRate: 2
    ResultPath: $
    Next: GetResult
  GetResult:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    Next: DownloadComplete
    OutputPath: $
    Parameters:
      FunctionName: '${HandleGetResultDownloadTask}'
      Payload.$: $
    Retry:
      - ErrorEquals:
          - Lambda.TooManyRequestsException
          - Lambda.ServiceException
        IntervalSeconds: 3
        MaxAttempts: 7
        BackoffRate: 2
  DownloadComplete:
    Type: Pass
    Comment: Used for result aggregation
    End: true
TimeoutSeconds: 1800
