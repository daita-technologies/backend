AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AI-workers-app


Globals:
  Function:
    Handler: app.lambda_handler
    Runtime: python3.8


Parameters:

  AIWorkerKeyPair:
    Type: String
    Default: ai-workers
  SecurityGroupIds:
    Type: String
    Default: sg-0da2ec27180883b3f # must have port 80 opened to internet
  SubnetIds:
    Type: String
    # Default: subnet-019da2a6738756f88 # must have internet gateway

  StagePara:
    Type: String
  ApplicationPara:
    Type: String

  # EFSAccessPointRootPath:
  #   Type: String
  #   Default: /ai-prepocessing-app
  EFSFileSystemId:
    Type:  String
    # Default: fs-01115862a24b75423
  EFSAccessPoint:
    Type: String


Resources:
  # Roles
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "AmazonEC2ContainerServiceforEC2Role"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeTags"
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:UpdateContainerInstancesState"
                  - "ecs:Submit*"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        - PolicyName: 'SQS'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:*'
                Resource: '*'
        - PolicyName: 'SecretsManagerParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParam*
                  - ssm:DescribeParam*
                Resource:
                  - arn:aws:ssm:*:*:parameter/*
        - PolicyName: 'CloudwatchPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: 'CognitoPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - cognito-identity:*
                  - cognito-idp:*
                Resource: '*'
        - PolicyName: 'DynamoDBPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
        - PolicyName: "OtherServicePermission"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - s3:*
                Resource: "*"
        - PolicyName: "ECSRunTaskPermission"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: "*"
        - PolicyName: "IAMPassRolePermission"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
        - PolicyName: 'AmazonS3FullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource:
                  - "*"
        - PolicyName: 'AllowEC2NetworkInterface'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeNetworkInterfaces
                - ec2:CreateNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:DescribeInstances
                - ec2:AttachNetworkInterface
              Resource:
                - "*"

  MyECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        - PolicyName: 'AmazonECSTaskExecutionRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"

  MyECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        - PolicyName: 'AmazonS3FullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource:
                  - "*"

  # EC2 Template
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html
  # Use an instance profile to pass an IAM role to an EC2 instance
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        # - aws-elasticbeanstalk-ec2-role # exists role, #TODO: create new role base on this
        # - !Ref ECSInstanceRole
        - ecsInstanceRole

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${StagePara}-${ApplicationPara}-Ec2-Launch-template"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        DisableApiTermination: true
        ImageId: ami-09ce6553a7f2ae75d #https://us-east-2.console.aws.amazon.com/systems-manager/parameters/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id/description?region=us-east-2#
        InstanceType: t3.medium
        KeyName: !Ref AIWorkerKeyPair
        SecurityGroupIds: !Split [",", !Ref SecurityGroupIds]
          # - !Ref SecurityGroupIds
        UserData: IyEvYmluL2Jhc2gKZWNobyBFQ1NfQ0xVU1RFUj1NeUNsdXN0ZXItNTVlNzA2MTUtYTVmYS00NzcwLWFhNzktMjAxYTBkNjYzYTllID4+IC9ldGMvZWNzL2Vjcy5jb25maWc=

  # Auto scaling template
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html
  # for now we only create a one instance scaling group, the scaling base on SQS part might need to be done by cli as below
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      # we only need 1 in this case
      - !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false #if true this block scale in termination completely
      MaxSize: 1
      MinSize: 0
      DesiredCapacity: 0

  # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-using-sqs-queue.html #Limitations and prerequisites
  # seem like we can not create the policy in sam template


  # SQS: => Can not scale base on SQS since we we planning to use single EC2 group for many ECS tasks,
  # => let ECS control scaling on EC2 group https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-auto-scaling.html
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling: #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-capacityprovider-managedscaling.html
          # InstanceWarmupPeriod: 300
          MaximumScalingStepSize: 1
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100 #TODO: investigate what is this percentage applied on, maybe one of these https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html
        # ManagedTerminationProtection: ENABLED #prevent instance that have running task be scaled in
      # Name: String

  # # EFS
  # EFSAccessPoint:  # subnet must be one of EFSFileSystemId's Mount targets
  #   Type: AWS::EFS::AccessPoint
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemId
  #     PosixUser:
  #       Gid: "1000"
  #       Uid: "1000"
  #     RootDirectory:
  #       CreationInfo:
  #         OwnerGid: "1000"
  #         OwnerUid: "1000"
  #         Permissions: "777"
  #       Path: !Ref EFSAccessPointRootPath

  # ECS
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${StagePara}-${ApplicationPara}-Cluster-AI-caller"
      CapacityProviders:
        - !Ref CapacityProvider
      #  Have to define it here, or in boto3.ecs.run_task arguments
      DefaultCapacityProviderStrategy:
        -
          CapacityProvider: !Ref CapacityProvider
          Weight: 1

  MyECSTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${StagePara}-MyECSTaskLogGroup-${AWS::StackName}"
      RetentionInDays: 7

  # # containerize Celery worker, which sub to SQS => Nah
  # # running ECS as task don't need to use worker-queue model
  # # TODO: check if it's possible to mount EFS to EC2 and then mount it to ECS task container
  MyWaitTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref MyECSTaskExecutionRole
      TaskRoleArn: !GetAtt MyECSTaskRole.Arn #TODO: create this in template
      # Cpu: 128
      # Memory: 128
      NetworkMode: awsvpc
      ContainerDefinitions:
        -
          Name: "wait-for-some-time"
          Image: public.ecr.aws/ubuntu/ubuntu #any ubuntu base image
          Cpu: 256
          Memory: 256
          Command:
            - "sleep"
            - "10"

  AIPreprocessingTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref MyECSTaskExecutionRole
      TaskRoleArn: !GetAtt MyECSTaskRole.Arn #TODO: create this in template
      NetworkMode: awsvpc
      ContainerDefinitions:
        -
          Name: "ai-preprocessing"
          Image: 737589818430.dkr.ecr.us-east-2.amazonaws.com/ai-services-repo:preprocessing
          Cpu: 2048
          Memory: 3072
          # Command:
          #   - --json_path
          #   - data/sample/preprocessing.json  # move this override to trigger function
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-group: !Ref MyECSTaskLogGroup
              awslogs-stream-prefix: ai-preprocessing
          MountPoints:
            -
              SourceVolume: "my-vol"
              ContainerPath: /app/data
      Volumes:
        -
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint
            FilesystemId: !Ref EFSFileSystemId
            TransitEncryption: ENABLED # enable this so maybe we don't need to config a access point https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-authorizationconfig.html
          Name: "my-vol"

  # TriggerECSTaskFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: functions/create
  #     Timeout: 60
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     Environment:
  #       Variables:
  #         TASK_DEFINITION: !Ref AIPreprocessingTask
  #         CLUSTER_NAME: !GetAtt ECSCluster.Arn
  #         SECURITY_GROUP_ID: !Ref SecurityGroupIds
  #         SUBNET_ID: !Ref SubnetIds

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ECSCluster:
    Description: "ECS Cluster with EC2 provider"
    Value: !GetAtt ECSCluster.Arn
  AIPreprocessingTask:
    Description: "ECS task definition of AI Preprocessing step"
    Value: !Ref AIPreprocessingTask