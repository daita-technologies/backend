AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  daita-caller-service-app

  Sample SAM Template for daita-caller-service-app


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 800
    Handler: app.lambda_handler
    Runtime: python3.8
    Architectures:
      - x86_64
    Environment:
      Variables:
        STAGE: Production
        TABLE_NAME: global-table
        LOGGING: !Ref minimumLogLevel
    Layers:
        - !Ref CommonCodeLayerName     

## The general rule seems to be to use !Sub for in line substitutions and !ref for stand alone text
Parameters:
  minimumLogLevel:
    Type: String
    Default: DEBUG
  StagePara:
    Type: String
  CommonCodeLayerName:
    Type: String

Resources:  

  #================ ROLES =====================================================  

  # add role to start state machine from eventbus
  CallerServiceEventBusRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DirectlyInvokeStepFunctions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
              - "states:StartExecution"
              Effect: Allow
              Resource:
                - !Ref CallerServiceStateMachine  

  #================ LAMBDA FUNCTIONS ==========================================
      
  PreprocessGenerateTask:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/handlers/preprocess_generate_batch    
  
  #================ EVENT BUS =================================================

  CallerServiceEventBus:
    Type: AWS::Events::EventBus
    Properties: 
      Name: !Sub "${StagePara}-CallerServiceEventBus"

  CallerServiceEventBusDefaultRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Default Rule for Any event"
      State: ENABLED
      EventBusName: !Ref CallerServiceEventBus
      EventPattern:
        source:
          - "source.events"
        detail-type:
          - "lambda.event"
      Targets:
        - 
          Arn: !GetAtt CallerServiceStateMachine.Arn 
          Id: "CallerServiceStateMachineTarget"
          RoleArn: !GetAtt CallerServiceEventBusRole.Arn  

  #================ LOGS FOR STEP FUNCTIONS ===================================

  CallerServiceStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "CallerServiceStateMachineLogGroup-${AWS::StackName}"
      RetentionInDays: 7

  #================ PROCESSOR STATE MACHINE ===================================

  CallerServiceStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Type: EXPRESS
      Type: STANDARD
      Name: !Sub "${StagePara}-${AWS::StackName}-CallerServiceStateMachine"
      Policies:
        - Statement:
          - Sid: AWSStepFunctionsFullAccess
            Effect: Allow
            Action: 
            - "states:*"
            Resource: 
            - !Ref PrepareStateMachine
            - !Ref DownloadStateMachine
            - !Ref GenerateStateMachine
            - !Ref UploadStateMachine
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
          - Sid: CloudWatchEventsFullAccess
            Effect: Allow
            Action:
            - "events:*"
            Resource: "*"
          - Sid: IAMPassRoleForCloudWatchEvents
            Effect: Allow
            Action:
            - "iam:PassRole"
            Resource: "arn:aws:iam::*:role/AWS_Events_Invoke_Targets"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/caller_service_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        PrepareStateMachine: !GetAtt PrepareStateMachine.Arn
        DownloadStateMachine: !GetAtt DownloadStateMachine.Arn
        GenerateStateMachine: !GetAtt GenerateStateMachine.Arn
        UploadStateMachine: !GetAtt UploadStateMachine.Arn

  PrepareStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${AWS::StackName}-PrepareStateMachine"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PreprocessGenerateTask   
        - Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/prepare_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        PreprocessGenerateTask: !GetAtt PreprocessGenerateTask.Arn

  DownloadStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${AWS::StackName}-DownloadStateMachine"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PreprocessGenerateTask           
        - Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/download_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        PreprocessGenerateTask: !GetAtt PreprocessGenerateTask.Arn

  GenerateStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${AWS::StackName}-GenerateStateMachine"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PreprocessGenerateTask   
        - Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/generate_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        PreprocessGenerateTask: !GetAtt PreprocessGenerateTask.Arn

  UploadStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${AWS::StackName}-UploadStateMachine"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PreprocessGenerateTask  
        - Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/upload_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        PreprocessGenerateTask: !GetAtt PreprocessGenerateTask.Arn

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api 
  CallerServiceEventBusArn:
    Description: "ARN of EventBus"
    Value: !GetAtt CallerServiceEventBus.Arn
  CallerServiceEventBusName:
    Description: "Name of EventBus"
    Value: !Ref CallerServiceEventBus
  # LayerARN:
  #   Description: "ARN of common code layer"
  #   Value: !GetAtt CommonCodeLayer.Arn


