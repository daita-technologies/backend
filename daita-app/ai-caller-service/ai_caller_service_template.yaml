AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  daita-caller-service-app

  Sample SAM Template for daita-caller-service-app


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900
    Handler: app.lambda_handler
    Runtime: python3.8
    Architectures:
      - x86_64
    Environment:
      Variables:
        STAGE: Production
        TABLE_NAME: global-table
        LOGGING: !Ref minimumLogLevel
        TABLE_GENERATE_TASK: !Ref TableGenerateTaskName
        ROOTEFS: !Ref ROOTEFS
        EFSPATH: !Ref EFSStorageAI
        MODE: !Ref Mode
    Layers:
        - !Ref CommonCodeLayerName

## The general rule seems to be to use !Sub for in line substitutions and !ref for stand alone text
Parameters:
  minimumLogLevel:
    Type: String
    Default: DEBUG
  StagePara:
    Type: String
  MaxConcurrencyTasks:
    Type: String
  CommonCodeLayerName:
    Type: String
  ApplicationPara:
    Type: String
  EFSFileSystemId:
    Type: String
    Default: fs-0199771f2dfe97ace
  EFSStorageAI:
    Type: String
    Default: /mnt/generation-task
  ROOTEFS:
    Type: String
  SubnetIDsPara:
    Type: CommaDelimitedList
  SecurityGroupIdsPara:
    Type: CommaDelimitedList
  S3BucketNamePara:
    Type: String
  TableGenerateTaskName:
    Type: String
  TableProjectSumName:
    Type: String
  LambdaRoleARN:
    Type: String
  LambdaRoleARN:
    Type: String
  LambdaRoleARN:
    Type: String
  TableDataAugmentName:
    Type: String
  TableDataOriginalName:
    Type: String
  TableDataPreprocessName:
    Type: String
  TableProjectsName:
    Type: String
  Mode:
    Type: String


Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        - PolicyName: 'SecretsManagerParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParam*
                  - ssm:DescribeParam*
                Resource:
                  - arn:aws:ssm:*:*:parameter/*
        - PolicyName: 'CloudwatchPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: 'CognitoPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - cognito-identity:*
                  - cognito-idp:*
                Resource: '*'
        - PolicyName: 'DynamoDBPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
        - PolicyName: "OtherServicePermission"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:GetExecutionHistory
                  - states:StartExecution
                  - states:DescribeExecution
                  - states:StopExecution
                Resource: "*"


  ###################################EFS template####################################
  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystemId
      PosixUser:
        Gid: "1000"
        Uid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "777"
        Path: !Ref EFSStorageAI
  #============================CREATE QUEUE=================================
  SqsEc2Work1:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      VisibilityTimeout: 0
      ContentBasedDeduplication: true
      QueueName: !Sub "${StagePara}-${ApplicationPara}-SqsEc2Work1.fifo"
  SqsEc2Work2:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      VisibilityTimeout: 0
      ContentBasedDeduplication: true
      QueueName: !Sub "${StagePara}-${ApplicationPara}-SqsEc2Work2.fifo"
  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      VisibilityTimeout: 0
      ContentBasedDeduplication: true
      QueueName: !Sub "${StagePara}-${ApplicationPara}-TaskQueue.fifo"
  UpdateDatabaseRequestAI:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      VisibilityTimeout: 900
      ContentBasedDeduplication: true
      QueueName: !Sub "${StagePara}-${ApplicationPara}-UpdateDatabaseRequestAI.fifo"
  ####================ ROLES =====================================================
  ### add role to start state machine from eventbus
  CallerServiceEventBusRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DirectlyInvokeStepFunctions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Action:
              - "states:StartExecution"
              Effect: Allow
              Resource:
                - !Ref CallerServiceStateMachine

  # Sub service
  # ECSTasks:
  #   Type: AWS::Serverless::Application
  #   Properties:
  #     Location: ./ecs-tasks/template.yaml
  #     Parameters:
  #       SecurityGroupIds: !Join [",", !Ref SecurityGroupIdsPara]
  #       SubnetIds: !Join [",", !Ref SubnetIDsPara]
  #       StagePara: !Ref StagePara
  #       EFSFileSystemId: !Ref EFSFileSystemId
  #       EFSAccessPoint: !Ref EFSAccessPoint
  #       StagePara: !Ref StagePara
  #       ApplicationPara: !Ref ApplicationPara

  #================ LAMBDA FUNCTIONS ==========================================

  ReferenceImageCalculateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/download_task/get_reference_images
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - "sqs:*"
          Resource: "*"
        - Sid: CloudWatchLogsPolicy
          Effect: Allow
          Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
          Resource: "*"
        - Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          Resource: "*"
        - Sid: CloudWatchEventsFullAccess
          Effect: Allow
          Action:
            - "events:*"
          Resource: "*"
        - Sid: AmazonElasticFileSystemClientFullAccess
          Effect: Allow
          Action:
          - elasticfilesystem:ClientMount
          - elasticfilesystem:ClientRootAccess
          - elasticfilesystem:ClientWrite
          - elasticfilesystem:DescribeMountTargets
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: "*"
  StopTaskStop:
    Type:  AWS::Serverless::Function
    DependsOn: CallerServiceStateMachineLogGroup
    Properties:
      CodeUri: functions/handlers/stop_process
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_GENERATE_TASK: !Ref TableGenerateTaskName
          EVENT_BUS_NAME: !Ref StopProcessEventBus
      Policies:
        - Statements:
          - Effect: Allow
            Action:
              - "logs:*"
              - "events:*"
            Resource: "*"
          -
            Effect: Allow
            Action: states:StartExecution
            Resource: "*"
          -
            Effect: Allow
            Action:
              - states:DescribeExecution
              - states:StopExecution
            Resource: "*"
      Events:
        stoptask:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref StopProcessEventBus
            Pattern:
              source:
                - "source.events"
              detail-type:
                - "lambda.event"


  HandleCompleteRequestAI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/generate_step/CompleteRequestAI
      Environment:
        Variables:
          TABLE_GENERATE_TASK: !Ref TableGenerateTaskName
          TABLE_DATA_AUGMENT: !Ref TableDataAugmentName
          TABLE_DATA_ORIGINAL: !Ref TableDataOriginalName
          TABLE_DATA_PREPROCESS: !Ref TableDataPreprocessName
          TABLE_PROJECT_SUMMARY: !Ref TableProjectSumName
      # Events:
      #   SQSQueueEvent:
      #     Type: SQS
      #     Properties:
      #       BatchSize: 10
      #       Queue: !GetAtt UpdateDatabaseRequestAI.Arn
      Policies:
        - Statement:
          -
            Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:PutItem"
              - "dynamodb:Scan"
              - "dynamodb:Query"
              - "dynamodb:UpdateItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:BatchGetItem"
              - "dynamodb:DescribeTable"
              - "dynamodb:ConditionCheckItem"
              - "lambda:InvokeFunction"
              - "ec2:*"
            Resource: "*"
          -
            Effect: Allow
            Action: states:StartExecution
            Resource: "*"
          -
            Effect: Allow
            Action:
              - states:DescribeExecution
              - states:StopExecution
            Resource: "*"
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
              - "logs:CreateLogDelivery"
              - "logs:GetLogDelivery"
              - "logs:UpdateLogDelivery"
              - "logs:DeleteLogDelivery"
              - "logs:ListLogDeliveries"
              - "logs:PutResourcePolicy"
              - "logs:DescribeResourcePolicies"
              - "logs:DescribeLogGroup"
              - "logs:DescribeLogGroups"
              - "lambda:InvokeFunction"
            Resource: "*"
          - Sid: CloudWatchEventsFullAccess
            Effect: Allow
            Action:
              - "events:*"
            Resource: "*"
          - Sid: AmazonElasticFileSystemClientFullAccess
            Effect: Allow
            Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientRootAccess
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:DescribeMountTargets
            Resource: "*"

  CronJobStopEc2:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/crontab/stop_ec2
      Environment:
        Variables:
          QUEUE_EC2_NAME_1: !GetAtt SqsEc2Work1.QueueName
          QUEUE_EC2_NAME_2: !GetAtt SqsEc2Work2.QueueName
          SF_CALL_SERVICE: !GetAtt CallerServiceStateMachine.Arn
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0/10 * * * ? *)
      Policies:
      - Statement:
        - Effect: Allow
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            - "lambda:InvokeFunction"
            - "states:ListExecutions"
          Resource: "*"
        - Effect: Allow
          Action:
            - "sqs:GetQueueAttributes"
            - "sqs:SendMessage"
            - "sqs:ReceiveMessage"
            - "sqs:DeleteMessage"
            - "sqs:DeleteMessageBatch"
            - "sqs:GetQueueUrl"
          Resource: "*"
        - Sid: LambdaInvokefunction
          Effect: Allow
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Sid: CloudWatchLogsPolicy
          Effect: Allow
          Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
          Resource: "*"
        - Sid: CloudWatchEventsFullAccess
          Effect: Allow
          Action:
            - "events:*"
          Resource: "*"
        - Sid: EC2ALLOW
          Effect: Allow
          Action:
            - autoscaling:StartInstanceRefresh
            - autoscaling:Describe*
            - autoscaling:UpdateAutoScalingGroup
            - ec2:CreateLaunchTemplateVersion
            - ec2:DescribeLaunchTemplates
            - ec2:RunInstances
            - ec2:DescribeInstances
            - sts:AssumeRole
            -  "ec2:Start*"
            -  "ec2:Stop*"
            - iam:PassRole
          Resource: '*'

  HandlerUploadBatchToS3:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/generate_step/HandleBatchToS3
      VpcConfig:
        SecurityGroupIds: !Split [',', !Join [',', !Ref SecurityGroupIdsPara]]
        SubnetIds: !Split [',', !Join [',', !Ref SubnetIDsPara]]
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: !Ref EFSStorageAI
      Environment:
        Variables:
          QUEUE: !GetAtt UpdateDatabaseRequestAI.QueueName
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - "sqs:*"
          Resource: "*"
        - Sid: CloudWatchLogsPolicy
          Effect: Allow
          Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
          Resource: "*"
        - Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          Resource: "*"
        - Sid: CloudWatchEventsFullAccess
          Effect: Allow
          Action:
            - "events:*"
          Resource: "*"
        - Sid: AmazonElasticFileSystemClientFullAccess
          Effect: Allow
          Action:
          - elasticfilesystem:ClientMount
          - elasticfilesystem:ClientRootAccess
          - elasticfilesystem:ClientWrite
          - elasticfilesystem:DescribeMountTargets
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: "*"

  # GlobOutputFiles:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: functions/handlers/generate_step/glob_output_files
  #     VpcConfig:
  #       SecurityGroupIds: !Split [',', !Join [',', !Ref SecurityGroupIdsPara]]
  #       SubnetIds: !Split [',', !Join [',', !Ref SubnetIDsPara]]
  #     FileSystemConfigs:
  #       - Arn: !GetAtt EFSAccessPoint.Arn
  #         LocalMountPath: !Ref EFSStorageAI
  #     Policies:
  #     - Statement:
  #       - Sid: CloudWatchLogsPolicy
  #         Effect: Allow
  #         Action:
  #           - "logs:CreateLogDelivery"
  #           - "logs:GetLogDelivery"
  #           - "logs:UpdateLogDelivery"
  #           - "logs:DeleteLogDelivery"
  #           - "logs:ListLogDeliveries"
  #           - "logs:PutResourcePolicy"
  #           - "logs:DescribeResourcePolicies"
  #           - "logs:DescribeLogGroup"
  #           - "logs:DescribeLogGroups"
  #         Resource: "*"
  #       - Sid: CloudWatchEventsFullAccess
  #         Effect: Allow
  #         Action:
  #           - "events:*"
  #         Resource: "*"
  #       - Sid: AmazonElasticFileSystemClientFullAccess
  #         Effect: Allow
  #         Action:
  #         - elasticfilesystem:ClientMount
  #         - elasticfilesystem:ClientRootAccess
  #         - elasticfilesystem:ClientWrite
  #         - elasticfilesystem:DescribeMountTargets
  #         Resource: "*"

  HandleMergeResultRequestAI:
    Type: AWS::Serverless::Function
    Properties:
      VpcConfig:
        SecurityGroupIds: !Split [',', !Join [',', !Ref SecurityGroupIdsPara]]
        SubnetIds: !Split [',', !Join [',', !Ref SubnetIDsPara]]
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: !Ref EFSStorageAI
      CodeUri: functions/handlers/generate_step/merge_result_request_ai
      Policies:
      - Statement:
        - Sid: ALLOWCRUDDynamoDB
          Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          - "ec2:*"
          Resource: "*"
        -
          Effect: Allow
          Action: states:StartExecution
          Resource: "*"
        -
          Effect: Allow
          Action:
            - states:DescribeExecution
            - states:StopExecution
          Resource: "*"
        - Sid: CloudWatchLogsPolicy
          Effect: Allow
          Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
          Resource: "*"
        - Sid: CloudWatchEventsFullAccess
          Effect: Allow
          Action:
            - "events:*"
          Resource: "*"
      Environment:
        Variables:
          TABLE_GENERATE_TASK: !Ref TableGenerateTaskName

  WorkerRequestAI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/generate_step/RequestAI
      # VpcConfig:
      #   SecurityGroupIds: !Split [',', !Join [',', !Ref SecurityGroupIdsPara]]
      #   SubnetIds: !Split [',', !Join [',', !Ref SubnetIDsPara]]
      # FileSystemConfigs:
      #   - Arn: !GetAtt EFSAccessPoint.Arn
      #     LocalMountPath: !Ref EFSStorageAI
      # Environment:
      #   Variables:
      #     PREPROCESSING_TASK_DEFINITION: abc #!GetAtt ECSTasks.Outputs.AIPreprocessingTask
      #     CLUSTER_NAME: abc #!GetAtt ECSTasks.Outputs.ECSCluster
      #     SECURITY_GROUP_IDs: !Join [",", !Ref SecurityGroupIdsPara]
      #     SUBNET_IDs : !Join [",", !Ref SubnetIDsPara]
      #     EFSLocalMountPath: !Ref EFSStorageAI
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - "sqs:GetQueueAttributes"
          - "sqs:SendMessage"
          - "sqs:ReceiveMessage"
          - "sqs:DeleteMessage"
          - "sqs:DeleteMessageBatch"
          - "sqs:GetQueueUrl"
          Resource: "*"
        - Sid: LambdaInvokefunction
          Effect: Allow
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Sid: CloudWatchLogsPolicy
          Effect: Allow
          Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
          Resource: "*"
        - Sid: CloudWatchEventsFullAccess
          Effect: Allow
          Action:
            - "events:*"
          Resource: "*"
        - Sid: EC2ALLOW
          Effect: Allow
          Action:
          - autoscaling:StartInstanceRefresh
          - autoscaling:Describe*
          - autoscaling:UpdateAutoScalingGroup
          - ec2:CreateLaunchTemplateVersion
          - ec2:DescribeLaunchTemplates
          - ec2:RunInstances
          - ec2:DescribeInstances
          - sts:AssumeRole
          -  "ec2:Start*"
          -  "ec2:Stop*"
          - iam:PassRole
          Resource: '*'
        - Sid: ALLOWCRUDDynamoDB
          Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:*
          Resource: "*"
        - Effect: Allow
          Action:
            - ecs:RunTask
            # - ec2:DescribeNetworkInterfaces
            # - ec2:CreateNetworkInterface
            # - ec2:DeleteNetworkInterface
            # - ec2:DescribeInstances
            # - ec2:AttachNetworkInterface
            - ec2:*
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientRootAccess
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:DescribeMountTargets
          Resource: "*"
        # - Sid: AmazonElasticFileSystemClientFullAccess
        #   Effect: Allow
        #   Action:
        #   - elasticfilesystem:ClientMount
        #   - elasticfilesystem:ClientRootAccess
        #   - elasticfilesystem:ClientWrite
        #   - elasticfilesystem:DescribeMountTargets
        #   Resource: "*"
        # - PolicyName: "ECSRunTaskPermission"
        #   PolicyDocument:
        #     Statement:
        #       -
        #         Effect: Allow
        #         Action:
        #           - ecs:RunTask
        #         Resource: "*"
        # - PolicyName: "IAMPassRolePermission"
        #   PolicyDocument:
        #     Statement:
        #       -
        #         Effect: Allow
        #         Action:
        #           - iam:PassRole
        #         Resource: "*"
        # - PolicyName: 'AllowEC2NetworkInterface'
        #   PolicyDocument:
        #     Version: '2012-10-17'
        #     Statement:
        #     - Effect: Allow
        #       Action:
        #         - ec2:DescribeNetworkInterfaces
        #         - ec2:CreateNetworkInterface
        #         - ec2:DeleteNetworkInterface
        #         - ec2:DescribeInstances
        #         - ec2:AttachNetworkInterface
        #       Resource:
        #         - "*"

  UpdateStatusTask:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/generate_step/updateStatusTask
      VpcConfig:
        SecurityGroupIds: !Split [',', !Join [',', !Ref SecurityGroupIdsPara]]
        SubnetIds: !Split [',', !Join [',', !Ref SubnetIDsPara]]
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: !Ref EFSStorageAI
      Environment:
        Variables:
          EFSPATH: !Ref EFSStorageAI
          ROOTEFS: !Ref ROOTEFS
      Policies:
      - Statement:
        - Sid: ALLOWCRUDDynamoDB
          Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          Resource: "*"

  PreprocessGenerateTask:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/preprocess_generate_batch/generate_batch
      Environment:
        Variables:
          TableProjectsName: !Ref TableProjectsName
          TableDataOriginalName: !Ref TableDataOriginalName
          TableDataPreprocessName: !Ref TableDataPreprocessName
      Policies:
      - Statement:
        - Sid: ALLOWCRUDDynamoDB
          Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          Resource: "*"

  HandleMergeResultDownloadImages:
    Type: AWS::Serverless::Function
    Properties:
      VpcConfig:
        SecurityGroupIds: !Split [',', !Join [',', !Ref SecurityGroupIdsPara]]
        SubnetIds: !Split [',', !Join [',', !Ref SubnetIDsPara]]
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: !Ref EFSStorageAI
      Environment:
        Variables:
          EFSPATH: !Ref EFSStorageAI
          ROOTEFS: !Ref ROOTEFS
      CodeUri: functions/handlers/download_task/merge_download
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref S3BucketNamePara
        - Statement:
          - Sid: ALLOWCRUDDynamoDB
            Effect: Allow
            Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            - "lambda:InvokeFunction"
            - sts:AssumeRole
            Resource: "*"
          - Sid: AmazonElasticFileSystemClientFullAccess
            Effect: Allow
            Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientRootAccess
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:DescribeMountTargets
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:*
            Resource: "*"

  HandleGetResultDownloadTask:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/download_task/get_result_download_task
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref S3BucketNamePara
        - Statement:
          - Sid: ALLOWCRUDDynamoDB
            Effect: Allow
            Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            - "lambda:InvokeFunction"
            - sts:AssumeRole
            Resource: "*"
          - Sid: AmazonElasticFileSystemClientFullAccess
            Effect: Allow
            Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientRootAccess
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:DescribeMountTargets
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:*
            Resource: "*"

  HandleDownloadImages:
    Type: AWS::Serverless::Function
    Properties:
      VpcConfig:
        SecurityGroupIds: !Split [',', !Join [',', !Ref SecurityGroupIdsPara]]
        SubnetIds: !Split [',', !Join [',', !Ref SubnetIDsPara]]
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: !Ref EFSStorageAI
      CodeUri: functions/handlers/download_task/download_images
      Policies:
      - S3FullAccessPolicy:
          BucketName: !Ref S3BucketNamePara
      - Statement:
        - Sid: ALLOWCRUDDynamoDB
          Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          - sts:AssumeRole
          Resource: "*"
        - Sid: AmazonElasticFileSystemClientFullAccess
          Effect: Allow
          Action:
          - elasticfilesystem:ClientMount
          - elasticfilesystem:ClientRootAccess
          - elasticfilesystem:ClientWrite
          - elasticfilesystem:DescribeMountTargets
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:*
          Resource: "*"

  HandleDownloadTask:
    Type: AWS::Serverless::Function
    Properties:
      VpcConfig:
        SecurityGroupIds: !Split [',', !Join [',', !Ref SecurityGroupIdsPara]]
        SubnetIds: !Split [',', !Join [',', !Ref SubnetIDsPara]]
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: !Ref EFSStorageAI
      CodeUri: functions/handlers/download_task/download_task
      Environment:
        Variables:
          EFSPATH: !Ref EFSStorageAI
          ROOTEFS: !Ref ROOTEFS
      Policies:
      - S3FullAccessPolicy:
          BucketName: !Ref S3BucketNamePara
      - Statement:
        - Sid: ALLOWCRUDDynamoDB
          Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          - sts:AssumeRole
          Resource: "*"
        - Sid: AmazonElasticFileSystemClientFullAccess
          Effect: Allow
          Action:
          - elasticfilesystem:ClientMount
          - elasticfilesystem:ClientRootAccess
          - elasticfilesystem:ClientWrite
          - elasticfilesystem:DescribeMountTargets
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:*
          Resource: "*"

  HandleGenerateStep:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/generate_step/generate_task
      Environment:
        Variables:
          QUEUE_EC2_NAME_1: !GetAtt SqsEc2Work1.QueueName
          QUEUE_EC2_NAME_2: !GetAtt SqsEc2Work2.QueueName
      Policies:
      - SQSSendMessagePolicy:
          QueueName: !GetAtt SqsEc2Work1.QueueName
      - SQSSendMessagePolicy:
          QueueName: !GetAtt SqsEc2Work2.QueueName
      - S3FullAccessPolicy:
          BucketName: !Ref S3BucketNamePara
      - Statement:
        - Effect: Allow
          Action:
          - "sqs:GetQueueAttributes"
          - "sqs:SendMessage"
          - "sqs:ReceiveMessage"
          - "sqs:DeleteMessage"
          - "sqs:DeleteMessageBatch"
          - "sqs:GetQueueUrl"
          Resource: "*"
        - Sid: ALLOWCRUDDynamoDB
          Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          Resource: "*"
        - Sid: AmazonElasticFileSystemClientFullAccess
          Effect: Allow
          Action:
          - elasticfilesystem:ClientMount
          - elasticfilesystem:ClientRootAccess
          - elasticfilesystem:ClientWrite
          - elasticfilesystem:DescribeMountTargets
          Resource: "*"
        - Sid: EC2ALLOW
          Effect: Allow
          Action:
          - autoscaling:StartInstanceRefresh
          - autoscaling:Describe*
          - autoscaling:UpdateAutoScalingGroup
          - ec2:CreateLaunchTemplateVersion
          - ec2:DescribeLaunchTemplates
          - ec2:RunInstances
          - ec2:DescribeInstances
          - sts:AssumeRole
          -  "ec2:Start*"
          -  "ec2:Stop*"
          - iam:PassRole
          Resource: '*'
        - Effect: Allow
          Action:
          - s3:*
          Resource: "*"

  CronJobConsumer:
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/crontab/consumer
      Environment:
        Variables:
          TASK_QUEUE: !GetAtt TaskQueue.QueueName
          EVENT_BUS_NAME: !Ref CallerServiceEventBus
          TABLE_GENERATE_TASK: !Ref TableGenerateTaskName
          MAX_CONCURRENCY_TASKS : !Ref MaxConcurrencyTasks
          TABLE_DATA_AUGMENT: !Ref TableDataAugmentName
          TABLE_DATA_PREPROCESS: !Ref TableDataPreprocessName
          TABLE_PROJECT_SUMMARY: !Ref TableProjectSumName
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0/1 * * * ? *)
      Policies:
      - Statement:
        - Effect: Allow
          Action:
            - "logs:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: "*"
        - Effect: Allow
          Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
          - "dynamodb:UpdateItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:DescribeTable"
          - "dynamodb:ConditionCheckItem"
          - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: Allow
          Action:
          - "sqs:GetQueueAttributes"
          - "sqs:SendMessage"
          - "sqs:ReceiveMessage"
          - "sqs:DeleteMessage"
          - "sqs:DeleteMessageBatch"
          - "sqs:GetQueueUrl"
          Resource: "*"

  HandleTaskQueue:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/handlers/task_queue
      Environment:
        Variables:
          TASK_QUEUE: !GetAtt TaskQueue.QueueName
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - "sqs:GetQueueAttributes"
          - "sqs:SendMessage"
          - "sqs:ReceiveMessage"
          - "sqs:DeleteMessage"
          - "sqs:DeleteMessageBatch"
          - "sqs:GetQueueUrl"
          Resource: "*"
      Events:
        stoptask:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref ProcessAITaskEventBus
            Pattern:
              source:
                - "source.events"
              detail-type:
                - "lambda.event"
  #================ EVENT BUS =================================================
  StopProcessEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${StagePara}-${ApplicationPara}-StopProcessEventBus"

  ProcessAITaskEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${StagePara}-${ApplicationPara}-ProcessAITaskEventBus"

  CallerServiceEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${StagePara}-${ApplicationPara}-CallerServiceEventBus"

  CallerServiceEventBusDefaultRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Default Rule for Any event"
      State: ENABLED
      EventBusName: !Ref CallerServiceEventBus
      EventPattern:
        source:
          - "source.events"
        detail-type:
          - "lambda.event"
      Targets:
        -
          Arn: !GetAtt CallerServiceStateMachine.Arn
          Id: "CallerServiceStateMachineTarget"
          RoleArn: !GetAtt CallerServiceEventBusRole.Arn

  #================ LOGS FOR STEP FUNCTIONS ===================================

  CallerServiceStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${StagePara}-${ApplicationPara}-CallerServiceSMLogGr"
      RetentionInDays: 7

  #================ PROCESSOR STATE MACHINE ===================================

  CallerServiceStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Type: EXPRESS
      Type: STANDARD
      Name: !Sub "${StagePara}-${ApplicationPara}-CallerServiceSM"
      Policies:
        - Statement:
          - Sid: AWSStepFunctionsFullAccess
            Effect: Allow
            Action:
            - "states:*"
            Resource:
            - !Ref PrepareStateMachine
            - !Ref DownloadStateMachine
            - !Ref GenerateStateMachine
            - !Ref UploadStateMachine
          - Sid: ALLOWCRUDDynamoDB
            Effect: Allow
            Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            - "lambda:InvokeFunction"
            Resource: "*"
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
          - Sid: CloudWatchEventsFullAccess
            Effect: Allow
            Action:
            - "events:*"
            Resource: "*"
          - Sid: IAMPassRoleForCloudWatchEvents
            Effect: Allow
            Action:
            - "iam:PassRole"
            Resource: "arn:aws:iam::*:role/AWS_Events_Invoke_Targets"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/caller_service_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        PrepareStateMachine: !GetAtt PrepareStateMachine.Arn
        DownloadStateMachine: !GetAtt DownloadStateMachine.Arn
        GenerateStateMachine: !GetAtt GenerateStateMachine.Arn
        UploadStateMachine: !GetAtt UploadStateMachine.Arn
        TableGenerateTaskName: !Ref TableGenerateTaskName

  PrepareStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${ApplicationPara}-PrepareSM"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PreprocessGenerateTask
        - Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
          - Sid: ALLOWCRUDDynamoDB
            Effect: Allow
            Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            - "lambda:InvokeFunction"
            Resource: "*"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/prepare_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        PreprocessGenerateTask: !GetAtt PreprocessGenerateTask.Arn

############################################################################################################
  DownloadStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${ApplicationPara}-DownloadSM"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref HandleDownloadTask
            FunctionName: !Ref HandleDownloadImages
            FunctionName: !Ref HandleMergeResultDownloadImages
            FunctionName: !Ref HandleGetResultDownloadTask
            FunctionName: !Ref ReferenceImageCalculateFunction
        - Statement:
          - Sid: ALLOWCRUDDynamoDB
            Effect: Allow
            Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            - "lambda:InvokeFunction"
            Resource: "*"
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            - "lambda:InvokeFunction"
            Resource: "*"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/download_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        HandleDownloadTask: !GetAtt HandleDownloadTask.Arn
        HandleDownloadImages: !GetAtt HandleDownloadImages.Arn
        HandleMergeResultDownloadImages: !GetAtt HandleMergeResultDownloadImages.Arn
        HandleGetResultDownloadTask: !GetAtt HandleGetResultDownloadTask.Arn
        ReferenceImageCalculateFunction: !GetAtt ReferenceImageCalculateFunction.Arn
############################################################################################################
  GenerateStateMachine:
    Type: AWS::Serverless::StateMachine
    # DependsOn:
    #   - EC2StartStopRole
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${ApplicationPara}-GenerateSM"
      DefinitionSubstitutions:
        HandleGenerateStep: !GetAtt HandleGenerateStep.Arn
        WorkerRequestAI: !GetAtt WorkerRequestAI.Arn
        HandleMergeResultRequestAI: !GetAtt HandleMergeResultRequestAI.Arn
        HandleCompleteRequestAI: !GetAtt HandleCompleteRequestAI.Arn
        HandlerUploadBatchToS3: !GetAtt HandlerUploadBatchToS3.Arn
        UpdateStatusTask: !GetAtt UpdateStatusTask.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref HandleGenerateStep
            FunctionName: !Ref WorkerRequestAI
            FunctionName: !Ref HandleMergeResultRequestAI
            FunctionName: !Ref HandlerUploadBatchToS3
            FunctionName: !Ref HandleCompleteRequestAI
        - Statement:
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            - "lambda:InvokeFunction"
            Resource: "*"
          - Sid: EC2ALLOW
            Effect: Allow
            Action:
            - autoscaling:StartInstanceRefresh
            - autoscaling:Describe*
            - autoscaling:UpdateAutoScalingGroup
            - ec2:CreateLaunchTemplateVersion
            - ec2:DescribeLaunchTemplates
            - ec2:RunInstances
            - ec2:DescribeInstances
            - iam:PassRole
            -  "ec2:Start*"
            -  "ec2:Stop*"
            Resource: '*'
          - Sid: ALLOWCRUDDynamoDB
            Effect: Allow
            Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            Resource: "*"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/generate_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn



  UploadStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${ApplicationPara}-UploadSM"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PreprocessGenerateTask
        - Statement:
          - Sid: ALLOWCRUDDynamoDB
            Effect: Allow
            Action:
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:BatchGetItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:ConditionCheckItem"
            - "lambda:InvokeFunction"
            Resource: "*"
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
      Tracing:
        Enabled: true
      DefinitionUri: statemachine/upload_state_machine.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt CallerServiceStateMachineLogGroup.Arn
      DefinitionSubstitutions:
        PreprocessGenerateTask: !GetAtt PreprocessGenerateTask.Arn
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CallerServiceEventBusArn:
    Description: "ARN of EventBus"
    Value: !GetAtt CallerServiceEventBus.Arn
  CallerServiceEventBusName:
    Description: "Name of EventBus"
    Value: !Ref CallerServiceEventBus
  StopProcessEventBusArn:
    Description: "ARN of EventBus"
    Value: !GetAtt StopProcessEventBus.Arn
  StopProcessEventBusName:
    Description: "Name of EventBus"
    Value: !Ref StopProcessEventBus
  ProcessAITaskEventBusArn:
    Description: "Name of EventBus"
    Value: !GetAtt ProcessAITaskEventBus.Arn
  ProcessAITaskEventBusName:
    Description: "Name of EventBus"
    Value: !Ref ProcessAITaskEventBus
  TaskQueueName:
    Value: !GetAtt TaskQueue.QueueName
  # LayerARN:
  #   Description: "ARN of common code layer"
  #   Value: !GetAtt CommonCodeLayer.Arn
