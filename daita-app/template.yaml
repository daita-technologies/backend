AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Nested application resources

## The general rule seems to be to use !Sub for in line substitutions and !ref for stand alone text
Parameters:
  Mode:
    Type: String
    Default: staging
  Stage:
    Type: String
    Default: dev
  Application:
    Type: String
    Default: daita
  SecurityGroupIds:
    Type: String
    Default: 'sg-0315a5ecee0dc69fe,sg-0b3b2fcc4dc7686ad,sg-af50cbde,sg-07c27f59bc172f180,sg-0796222bd5149736f'
  SecurityGroupsIdsDefault:
    Type: String
    Default: 'sg-af50cbde'
  SubnetIDs:
    Type:  String
    Default: subnet-31ff5b5a
  SubnetIDDefault:
    Type: String
    Default: subnet-31ff5b5a
  S3BucketName:
    Type: String
    Default: daita-client-data
  VPCid:
    Type: String
    Default: vpc-53239e38
  EFSFileSystemId:
    Type:  String
    Default: fs-0199771f2dfe97ace
  MaxConcurrencyTasks:
    Type: String
    Default: 3
Resources:
  #=============== SYSTEM PARAMETER CONFIGURATON ==============================
  LimitPreprocessTimes:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Stage}-LimitPreprocessTimes"
      Type: String
      Value: "1"
  LimitAugmentTimes:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Stage}-LimitAugmentTimes"
      Type: String
      Value: "5"
  BatchsizeCalculateReferenceImage:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Stage}-BatchsizeCalculateReferenceImage"
      Type: String
      Value: "4"
  MaxWidthResolutionImage:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Stage}-MaxWidthResolutionImage"
      Type: String
      Value: "4000"
  MaxHeightResolutionImage:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Stage}-MaxHeightResolutionImage"
      Type: String
      Value: "4000"

  #=============== ECR ========================================================
  DecompressEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${Stage}-${Application}-dataflow-decompress"

  CompressDownloadEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${Stage}-${Application}-dataflow-compress-download"


  #================ ROLES =====================================================
  # lambda role
  GeneralLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        - PolicyName: 'SecretsManagerParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParam*
                  - ssm:DescribeParam*
                Resource:
                  - arn:aws:ssm:*:*:parameter/*
        - PolicyName: 'CloudwatchPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: 'CognitoPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - cognito-identity:*
                  - cognito-idp:*
                Resource: '*'
        - PolicyName: 'DynamoDBPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
        - PolicyName: "OtherServicePermission"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - events:PutEvents
                  - s3:Get*
                  - ecr:*
                  - elasticfilesystem:*
                  - states:*
                  - s3:*
                Resource: "*"

  #================ LAMBDA LAYERS  ============================================
  CommonCodeLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${Stage}-CommonCodeLayer"
      ContentUri: shared-layer/commons/
      CompatibleRuntimes:
        - python3.8


  #================ APPLICATIONS  =============================================
  AICallerService:
    Type: AWS::Serverless::Application
    Properties:
      Location: ai-caller-service/ai_caller_service_template.yaml
      Parameters:
        StagePara: !Ref Stage
        CommonCodeLayerName: !Ref CommonCodeLayer
        ApplicationPara: !Ref Application
        SubnetIDsPara: !Ref SubnetIDs
        SecurityGroupIdsPara: !Ref SecurityGroupIds
        S3BucketNamePara: !Ref S3BucketName
        MaxConcurrencyTasks: !Ref MaxConcurrencyTasks
        TableGenerateTaskName: !GetAtt DatabaseService.Outputs.TableGenerateTaskName
        LambdaRoleARN: !GetAtt GeneralLambdaExecutionRole.Arn
        TableDataAugmentName: !GetAtt DatabaseService.Outputs.TableDataAugmentName
        TableDataOriginalName: !GetAtt DatabaseService.Outputs.TableDataOriginalName
        TableDataPreprocessName: !GetAtt DatabaseService.Outputs.TableDataPreprocessName
        MaxConcurrencyTasks: !Ref MaxConcurrencyTasks
        EFSFileSystemId: !Ref EFSFileSystemId
        Mode: !Ref Mode
  DataFlowService:
    Type: AWS::Serverless::Application
    Properties:
      Location: dataflow-service/template.yaml
      Parameters:
        StagePara: !Ref Stage
        ApplicationPara: !Ref Application
        S3BucketName: !Ref S3BucketName
        TableDataFlowTaskName: !GetAtt DatabaseService.Outputs.TableDataFlowTaskName
        DecompressEcrRepositoryName: !Ref DecompressEcrRepository
        CompressDownloadEcrRepositoryName: !Ref CompressDownloadEcrRepository
        TableMethodsName: !GetAtt DatabaseService.Outputs.TableMethodsName
        CommonCodeLayerName: !Ref CommonCodeLayer
        VpcId: !Ref VPCid
        SubnetId: !Ref SubnetIDDefault
        EFSFileSystemId: !Ref EFSFileSystemId
        SecurityGroupIds: !Ref SecurityGroupsIdsDefault
        Mode: !Ref Mode
  DatabaseService:
    Type: AWS::Serverless::Application
    Properties:
      Location: db-service/db_template.yaml
      Parameters:
        StagePara: !Ref Stage

  CoreService:
    Type: AWS::Serverless::Application
    Properties:
      Location: core-service/core_service_template.yaml
      Parameters:
        StagePara: !Ref Stage
        CallerServiceEventBusArn: !GetAtt AICallerService.Outputs.CallerServiceEventBusArn
        CallerServiceEventBusName: !GetAtt AICallerService.Outputs.CallerServiceEventBusName
        StopProcessEventBusArn: !GetAtt  AICallerService.Outputs.StopProcessEventBusArn
        StopProcessEventBusName: !GetAtt AICallerService.Outputs.StopProcessEventBusName
        TableGenerateTaskName: !GetAtt DatabaseService.Outputs.TableGenerateTaskName
        TableProjectsName: !GetAtt DatabaseService.Outputs.TableProjectsName
        TableMethodsName: !GetAtt DatabaseService.Outputs.TableMethodsName
        TableHealthCheckTasksName: !GetAtt DatabaseService.Outputs.TableHealthCheckTasksName
        TableHealthCheckInfoName: !GetAtt DatabaseService.Outputs.TableHealthCheckInfoName
        TableReferenceImageTasksName: !GetAtt DatabaseService.Outputs.TableHealthCheckTasksName
        TableReferenceImageInfoName: !GetAtt DatabaseService.Outputs.TableHealthCheckInfoName
        LimitPreprocessTimesName: !Ref LimitPreprocessTimes
        LimitAugmentTimesName: !Ref LimitAugmentTimes
        CommonCodeLayerName: !Ref CommonCodeLayer
        HealthCheckEventBusArn: !GetAtt HealthCheckService.Outputs.HealthCheckEventBusArn
        HealthCheckEventBusName: !GetAtt HealthCheckService.Outputs.HealthCheckEventBusName
        ParaTableDataFlowTaskName: !GetAtt DatabaseService.Outputs.TableDataFlowTaskName
        ParaDecompressFileStateMachineArn: !GetAtt DataFlowService.Outputs.DecompressFileStateMachineArn
        ParaCompressDownloadStateMachineArn: !GetAtt DataFlowService.Outputs.CompressDownloadStateMachineArn
        ParaTableDownloadTaskName: !GetAtt DatabaseService.Outputs.TableDownloadTaskName
        ParaTableProjectSumName: !GetAtt DatabaseService.Outputs.TableProjectSumName
        ParaIndexTaskProjectIDTaskID: !GetAtt DatabaseService.Outputs.IndexTaskProjectIDTaskIDName
        ProcessAITaskEventBusArn: !GetAtt  AICallerService.Outputs.ProcessAITaskEventBusArn
        ProcessAITaskEventBusName: !GetAtt  AICallerService.Outputs.ProcessAITaskEventBusName
        ### for reference image para
        TableReferenceImageTasksName: !GetAtt DatabaseService.Outputs.TableReferenceImageTasksName
        TableReferenceImageInfoName: !GetAtt DatabaseService.Outputs.TableReferenceImageInfoName
        ReferenceImageEventBusName: !GetAtt ReferenceImageService.Outputs.ReferenceImageEventBusName
        ####### Data Preprocess Table
        TableDataPreprocessName: !GetAtt DatabaseService.Outputs.TableDataPreprocessName
        MaxConcurrencyTasks: !Ref MaxConcurrencyTasks
        TaskQueueName: !GetAtt AICallerService.Outputs.TaskQueueName
        TableDataOriginalName: !GetAtt DatabaseService.Outputs.TableDataOriginalName
        TableDataAugmentName: !GetAtt DatabaseService.Outputs.TableDataAugmentName
        Mode: !Ref Mode
  HealthCheckService:
    Type: AWS::Serverless::Application
    Properties:
      Location: health-check-service/health_check_service.yaml
      Parameters:
        StagePara: !Ref Stage
        LambdaRole: !GetAtt GeneralLambdaExecutionRole.Arn
        TableHealthCheckTasksName: !GetAtt DatabaseService.Outputs.TableHealthCheckTasksName
        TableHealthCheckInfoName: !GetAtt DatabaseService.Outputs.TableHealthCheckInfoName
        TableDataAugmentName: !GetAtt DatabaseService.Outputs.TableDataAugmentName
        TableDataOriginalName: !GetAtt DatabaseService.Outputs.TableDataOriginalName
        TableDataPreprocessName: !GetAtt DatabaseService.Outputs.TableDataPreprocessName
        CommonCodeLayerName: !Ref CommonCodeLayer
        ApplicationPara: !Ref Application
        Mode: !Ref Mode
  ReferenceImageService:
    Type: AWS::Serverless::Application
    Properties:
      Location: reference-image-service/reference_image_service.yaml
      Parameters:
        StagePara: !Ref Stage
        LambdaRole: !GetAtt GeneralLambdaExecutionRole.Arn
        TableReferenceImageTasksName: !GetAtt DatabaseService.Outputs.TableReferenceImageTasksName
        TableReferenceImageInfoName: !GetAtt DatabaseService.Outputs.TableReferenceImageInfoName
        TableDataOriginalName: !GetAtt DatabaseService.Outputs.TableDataOriginalName
        TableProjectsName: !GetAtt DatabaseService.Outputs.TableProjectsName
        CommonCodeLayerName: !Ref CommonCodeLayer
        ApplicationPara: !Ref Application
        BatchsizeCalculateReferenceImage: !Ref BatchsizeCalculateReferenceImage
        MaxWidthResolutionImage: !Ref MaxWidthResolutionImage
        MaxHeightResolutionImage: !Ref MaxHeightResolutionImage
        Mode: !Ref Mode

Outputs:
  ZZBC:
    Value: Stage
  DecompressEcrRepositoryName:
    Value: !Ref DecompressEcrRepository
  CompressDownloadEcrRepositoryName:
    Value: !Ref CompressDownloadEcrRepository
  ABC:
    Value: !Ref Stage
