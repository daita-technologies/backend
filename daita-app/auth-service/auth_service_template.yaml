AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  daita-caller-service-app

  Sample SAM Template for daita-caller-service-app
Parameters:
  CallbackUrl:
    Type: CommaDelimitedList
  DomainUserPool:
    Type: CommaDelimitedList
  LogoutUrl:
    Type: CommaDelimitedList
  StagePara:
    Type: String
  Mode:
    Type: String
  LambdaRole:
    Type: String
  CommonCodeLayerName:
    Type: String
  TableConfirmCodeAuth:
    Type: String
Globals:
  Function:
    Timeout: 800
    Handler: app.lambda_handler
    Runtime: python3.8
    Architectures:
      - x86_64
    Environment:
      Variables:
        STAGE: !Ref StagePara
        MODE: !Ref Mode
        COGNITO_CLIENT_ID: !Ref CognitoUserPool
        COGNITO_USER_POOL: !Ref CognitoUserPoolClient
        TBL_CONFIRM_CODE: !Ref TableConfirmCodeAuth
    Layers:
        - !Ref CommonCodeLayerName
Resources:
######## lambda role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        - PolicyName: 'SQS'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:*'
                Resource: '*'
        - PolicyName: 'SecretsManagerParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParam*
                  - ssm:DescribeParam*
                Resource:
                  - arn:aws:ssm:*:*:parameter/*
        - PolicyName: 'CloudwatchPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:*'
                Resource: '*'
        - PolicyName: 'CognitoPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - cognito-identity:*
                  - cognito-idp:*
                Resource: '*'
        - PolicyName: 'DynamoDBPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
        - PolicyName: "OtherServicePermission"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - s3:*
                Resource: "*"
        - PolicyName: "InvokeFunction"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref AWS::StackName
  GoogleCognitoUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: "Google"
      AttributeMapping:
        email: email
      ProviderDetails:
        client_id: 639730110991-9t82efunb20f6m4stek56f6ut9t0kjfu.apps.googleusercontent.com
        client_secret: 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
        authorize_scopes: profile email openid
      ProviderType: Google
      UserPoolId:
        Ref : CognitoUserPool
  GithubCognitoUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ProviderName: github
      ProviderDetails:
        client_id: 0cec5cf3d1f070b36b63 
        client_secret: 5929cb027e02330533a587a8e9f5d2e0fd40e48e
        attributes_request_method: POST
        oidc_issuer: https://yf6ayuvru1.execute-api.us-east-2.amazonaws.com/dev
        authorize_scopes: "openid read:user user:email"
        jwks_uri: https://yf6ayuvru1.execute-api.us-east-2.amazonaws.com/dev/auth/github-openid-token-wrapper
        token_url: https://yf6ayuvru1.execute-api.us-east-2.amazonaws.com/dev/auth/github-openid-token-wrapper
        authorize_url: https://yf6ayuvru1.execute-api.us-east-2.amazonaws.com/dev/auth/github-openid-userinfo-wrapper
        attributes_url: https://github.com/login/oauth/authorize
      ProviderType: "OIDC"
      AttributeMapping:
        email: "email"
        username: sub
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
      - GoogleCognitoUserPoolIdentityProvider
      - GithubCognitoUserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: user-pool-client
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs: !Split [',', !Join [',', !Ref CallbackUrl]]
      LogoutURLs: !Split [',', !Join [',', !Ref LogoutUrl]]
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      SupportedIdentityProviders:
        - COGNITO
        - github
        - Google
      AccessTokenValidity: 2
      RefreshTokenValidity: 24
      IdTokenValidity: 2
      TokenValidityUnits: 
          AccessToken: hours
          IdToken: hours
          RefreshToken: hours
      AllowedOAuthFlowsUserPoolClient: true
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH       
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

  LoginFunction:
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: functions/login
      Role: !GetAtt LambdaExecutionRole.Arn
  
  RegisterFunction:
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: functions/sign_up
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          INVOKE_MAIL_LAMBDA: !Ref MailServiceFunction
  
  LoginRefreshTokenFunction:
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: functions/login_refresh_token
      Role: !GetAtt LambdaExecutionRole.Arn
  
  AuthConfirmFunction:
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth_confirm
      Role: !GetAtt LambdaExecutionRole.Arn
  
  ConfirmCodeForgotPasswordFunction:
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: functions/confirm_code_forgot_password
      Role: !GetAtt LambdaExecutionRole.Arn
  
  GithubTokenWrapper:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/github_openid_token_wrapper
      Role:  !GetAtt LambdaExecutionRole.Arn
  
  GithubUserinfoWrapper:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/github_openid_userinfo_wrapper
      Role:  !GetAtt LambdaExecutionRole.Arn

  CredentialLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/credential_login
      Role:  !GetAtt LambdaExecutionRole.Arn
  
  LoginSocialFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/login_social
      Role:  !GetAtt LambdaExecutionRole.Arn
  
  ResendCodeAuthConfirmCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/resend_confirmcode
      Role:  !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          INVOKE_MAIL_LAMBDA: !Ref MailServiceFunction
  ForgotpasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/forgot_password
      Role:  !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          INVOKE_MAIL_LAMBDA: !Ref MailServiceFunction
  MailServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/mail_service
      Role:  !GetAtt LambdaExecutionRole.Arn
Outputs:
  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
  UserPool:
    Value: !Ref CognitoUserPool
  Login:
    Value: !Ref LoginFunction
  SignUp:
    Value: !Ref RegisterFunction
  LoginRefreshToken:
    Value: !Ref LoginRefreshTokenFunction
  AuthConfirm:
    Value: !Ref AuthConfirmFunction
  ResendCodeAuthConfirmCode:
    Value: !Ref ResendCodeAuthConfirmCodeFunction
  ConfirmCodeForgotPassword:
    Value: !Ref ConfirmCodeForgotPasswordFunction
  Forgotpassword:
    Value: !Ref ForgotpasswordFunction