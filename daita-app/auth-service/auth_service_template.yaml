AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  daita-caller-service-app

  Sample SAM Template for daita-caller-service-app
Parameters:
  DomainUserPool:
    Type: String
  LogoutUrl:
    Type: String
  StagePara:
    Type: String
  Mode:
    Type: String
  LambdaRole:
    Type: String
  CommonCodeLayerName:
    Type: String
    
Globals:
  Function:
    Timeout: 800
    Handler: app.lambda_handler
    Runtime: python3.8
    Architectures:
      - x86_64
    Environment:
      Variables:
        STAGE: !Ref StagePara
        MODE: !Ref Mode
    Layers:
        - !Ref CommonCodeLayerName
Resources:
######## lambda role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        - PolicyName: 'SQS'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:*'
                Resource: '*'
        - PolicyName: 'SecretsManagerParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParam*
                  - ssm:DescribeParam*
                Resource:
                  - arn:aws:ssm:*:*:parameter/*
        - PolicyName: 'CloudwatchPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: 'CognitoPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - cognito-identity:*
                  - cognito-idp:*
                Resource: '*'
        - PolicyName: 'DynamoDBPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
        - PolicyName: "OtherServicePermission"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - s3:*
                Resource: "*"
        - PolicyName: "InvokeFunction"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Mode}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true     
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${Mode}-UserPoolClient
      GenerateSecret: false # set to false for web clients
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref DomainUserPool
      LogoutURLs: !Ref LogoutUrl
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit # for testing with Paw
      AllowedOAuthScopes:
        - email
        - openid
        - profile   
  # UserPoolDomain:
  #   Type: AWS::Cognito::UserPoolDomain
  #   Properties:
  #     Domain: !Sub ${DomainUserPool}
  #     UserPoolId: !Ref UserPool
      
# Outputs:
#   UserPoolId:
#     Export:
#       Name: !Sub $
    
#   UserPoolClientId:
