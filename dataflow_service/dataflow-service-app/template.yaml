AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  dataflow-service-app

  Sample SAM Template for dataflow-service-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        # DECOMPRESS_FILE_QUEUE_NAME: decompress-file.fifo
        EFS_COMPRESSFILE_MOUNT_POINT: /mnt/efs

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get

  UploadCompressedFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: upload_compressed_file/
      Handler: app.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Environment:
        Variables:
          DECOMPRESS_FILE_QUEUE_URL: !Ref DecompresFileSqsQueue

  DecompresFileSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: True
      # QueueName: decompress-file.fifo

  # ECS resources
  DecompressFileCluster:
    Type: AWS::ECS::Cluster
    Properties:
    CapacityProviders:
      - FARGATE

  DecompressFileTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: "decompress-file-task"
          Environment:
            - AWS_REGION: string
            - AWS_ACCESS_KEY_ID: string
            - AWS_SECRET_ACCESS_KEY: string
            - DECOMPRESS_FILE_QUEUE_URL: !Ref DecompresFileSqsQueue
            - EFS_COMPRESSFILE_MOUNT_POINT: !Ref EFS_COMPRESSFILE_MOUNT_POINT
          # this will be manually push to ecr, need to create first
          Image: "366577564432.dkr.ecr.us-east-2.amazonaws.com/decompress-file"
          Cpu: 256
          Memory: 512
          Essential: true
          MountPoints:
            -
              SourceVolume: "my-vol"
              ContainerPath: !Ref EFS_COMPRESSFILE_MOUNT_POINT
      Volumes:
        -
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: String
              IAM: String
            FilesystemId: fs-0199771f2dfe97ace
            TransitEncryption: ENABLED # enable this so maybe we don't need to config a access point https://docs.aws.amazon.com/pt_br/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-authorizationconfig.html
          Name: "my-vol"

  DecompressFileService:
    Type: AWS::ECS::Service
    Cluster: !Ref DecompressFileCluster
    TaskDefinition: !Ref DecompressFileTask
    DesiredCount: 1 # we will try to scale by sqs later


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
