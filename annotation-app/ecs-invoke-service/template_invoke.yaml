AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  daita-segmentation-image-service
Parameters:
  Mode:
    Type: String
    Default: dev
  StagePara:
    Type: String
    Default: test
  minimumLogLevel:
    Type: String
    Default: DEBUG
  AITaskECSClusterArn:
    Type: String
  AITaskDefinitionArn:
    Type: String
  SecurityGroupIds:
    Type: CommaDelimitedList
    Default: 'sg-0c9a0ca7844d7b128,sg-00d8b4ca79ee1e42f,sg-007caf776eee9bd32,sg-04b9c865721337372,sg-0b411b5391db8d7a3'
  LsPrivateSubnetIDs:
    Type: CommaDelimitedList
  ApplicationPara:
    Type: String
    Default: ecstask
  TableAnnoDataOriginalNameStream:
    Type: String
  CommonCodeLayerRef:
    Type: String

Globals:
  Function:
    Timeout: 800   
    Runtime: python3.8
    Architectures:
      - x86_64
    Layers:
      - !Ref CommonCodeLayerRef
    Environment:
      Variables:
        STAGE: !Ref StagePara
        MODE: !Ref Mode 
        LOGGING: !Ref minimumLogLevel
        REGION: !Ref AWS::Region
Resources:
  #================ ROLES =====================================================
  #-- use this role for apigateway access lambda
  ApiGatewayCallLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "apigateway.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: RestApiDirectInvokeLambda
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            Action:
            - "lambda:InvokeFunction"
            Effect: Allow
            Resource: "*"
  
  GeneralLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
        - PolicyName: 'SecretsManagerParameterAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParam*
                  - ssm:DescribeParam*
                Resource:
                  - arn:aws:ssm:*:*:parameter/*
        - PolicyName: 'CloudwatchPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: 'CognitoPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - cognito-identity:*
                  - cognito-idp:*
                Resource: '*'
        - PolicyName: 'DynamoDBPermission'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
        - PolicyName: "OtherServicePermission"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - events:PutEvents
                  - s3:Get*
                  - ecr:*
                  - elasticfilesystem:*
                  - states:*
                  - s3:*
                Resource: "*"


#   ###============== STATE MACHINE ==================
#   #================ PROCESSOR STATE MACHINE ===================================
  TestWaitSMLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/vendedlogs/states/${StagePara}-${ApplicationPara}-TestWait"
      RetentionInDays: 7

  HandleECSTaskStatemachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub "${StagePara}-${ApplicationPara}-Run-ECS-task-Segment"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref StartDebugFunction
        - Statement: 
          - Sid: CloudWatchLogsPolicy
            Effect: Allow
            Action:
            - "logs:CreateLogDelivery"
            - "logs:GetLogDelivery"
            - "logs:UpdateLogDelivery"
            - "logs:DeleteLogDelivery"
            - "logs:ListLogDeliveries"
            - "logs:PutResourcePolicy"
            - "logs:DescribeResourcePolicies"
            - "logs:DescribeLogGroup"
            - "logs:DescribeLogGroups"
            Resource: "*"
          - Sid: CloudWatchEventsFullAccess
            Effect: Allow
            Action:
              - "events:*"
              - "ecs:*"
              - "iam:PassRole"
            Resource: "*"
          - Sid: IAMPassRoleForCloudWatchEvents
            Effect: Allow
            Action:
              - "iam:PassRole"
            Resource: "arn:aws:iam::*:role/AWS_Events_Invoke_Targets"
      Tracing:
        Enabled: true
      DefinitionUri: ./statemachine/ecs_task.asl.yaml
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt TestWaitSMLogGroup.Arn
      DefinitionSubstitutions:
        AITaskECSClusterArn: !Ref AITaskECSClusterArn
        AITaskDefinitionArn: !Ref AITaskDefinitionArn
        SecurityGroupIds: !Join [',', !Ref SecurityGroupIds]  
        LsPrivateSubnetIDs: !Join [',', !Ref LsPrivateSubnetIDs]
        StartDebugFunction: !Ref StartDebugFunction


  EventSourceMappingDatabaseOriginal:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1000
      Enabled: True
      EventSourceArn: !Ref TableAnnoDataOriginalNameStream
      FunctionName: !Ref StreamDataOriginalAnnotationFunction
      StartingPosition: LATEST
      MaximumBatchingWindowInSeconds: 10


  ###========= LAMBDA API FUNCTION ==============
  StreamDataOriginalAnnotationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api-handler-functions
      Handler: hdler_stream_data_annotation.lambda_handler
      Role: !GetAtt GeneralLambdaExecutionRole.Arn
      MemorySize: 256
      Environment:
        Variables:
          ECS_TASK_ARN: !GetAtt HandleECSTaskStatemachine.Arn
  StartDebugFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./statemachine/functions/ecs_task
      Handler: hdler_start_step_function.lambda_handler
      Role: !GetAtt GeneralLambdaExecutionRole.Arn
      MemorySize: 256